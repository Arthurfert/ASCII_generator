from logger.logger import logger
import tkinter as tk
from tkinter import filedialog, messagebox, ttk
import threading

from generator import ASCIIGenerator

# V√©rifier si rembg est disponible (m√™me logique que generator.py)
try:
    from rembg import remove
    REMBG_AVAILABLE = True
    logger.info("rembg disponible dans l'interface - Support de suppression d'arri√®re-plan activ√©")
except ImportError:
    REMBG_AVAILABLE = False
    logger.warning("rembg non disponible dans l'interface - Suppression d'arri√®re-plan d√©sactiv√©e")

class ASCIIGeneratorGUI:
    """Interface graphique pour le g√©n√©rateur ASCII."""
    
    def __init__(self):
        self.root = tk.Tk()
        self.root.title("G√©n√©rateur d'Images ASCII")
        self.root.geometry("800x650")
        
        # Variables
        self.image_path = tk.StringVar()
        self.style = tk.StringVar(value="standard")
        self.width = tk.IntVar(value=80)
        self.remove_background = tk.BooleanVar(value=False)
        
        # Log du statut de rembg au d√©marrage
        if REMBG_AVAILABLE:
            logger.info("Interface: Suppression d'arri√®re-plan disponible")
        else:
            logger.warning("Interface: Suppression d'arri√®re-plan non disponible")
        
        self.setup_ui()
        
    def setup_ui(self):
        """Configure l'interface utilisateur."""
        # Frame principal
        main_frame = ttk.Frame(self.root, padding="10")
        main_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        
        # Configuration responsive
        self.root.columnconfigure(0, weight=1)
        self.root.rowconfigure(0, weight=1)
        main_frame.columnconfigure(1, weight=1)
        
        # Titre
        title_label = ttk.Label(main_frame, text="G√©n√©rateur d'Images ASCII", 
                                font=("Courier", 16, "bold"))
        title_label.grid(row=0, column=0, columnspan=3, pady=(0, 20))
        
        # S√©lection d'image
        ttk.Label(main_frame, text="Image:").grid(row=1, column=0, sticky=tk.W, pady=5)
        
        image_frame = ttk.Frame(main_frame)
        image_frame.grid(row=1, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        image_frame.columnconfigure(0, weight=1)
        
        self.image_entry = ttk.Entry(image_frame, textvariable=self.image_path, state="readonly")
        self.image_entry.grid(row=0, column=0, sticky=(tk.W, tk.E), padx=(0, 5))
        
        ttk.Button(image_frame, text="Parcourir...", 
                  command=self.browse_image).grid(row=0, column=1)
        
        # Style
        ttk.Label(main_frame, text="Style:").grid(row=2, column=0, sticky=tk.W, pady=5)
        
        style_combo = ttk.Combobox(main_frame, textvariable=self.style, 
                                  values=list(ASCIIGenerator.ASCII_CHARS.keys()),
                                  state="readonly", width=15)
        style_combo.grid(row=2, column=1, sticky=tk.W, pady=5)
        
        # Description du style
        self.style_desc = ttk.Label(main_frame, text="Bon √©quilibre qualit√©/vitesse", 
                                   foreground="gray")
        self.style_desc.grid(row=2, column=2, sticky=tk.W, padx=(10, 0), pady=5)
        style_combo.bind('<<ComboboxSelected>>', self.update_style_description)
        
        # Options de traitement
        options_frame = ttk.LabelFrame(main_frame, text="Options de traitement", padding="5")
        options_frame.grid(row=3, column=0, columnspan=3, sticky=(tk.W, tk.E), pady=10)
        
        # Checkbox pour suppression d'arri√®re-plan
        self.bg_checkbox = ttk.Checkbutton(
            options_frame, 
            text="Supprimer l'arri√®re-plan", 
            variable=self.remove_background,
            command=self.on_background_option_change
        )
        self.bg_checkbox.grid(row=0, column=0, sticky=tk.W)
        
        # Label d'information sur rembg - condition corrig√©e
        if REMBG_AVAILABLE:
            self.bg_info = ttk.Label(options_frame, text="‚úÖ Disponible - Am√©liore le focus sur le sujet", 
                                    foreground="green", font=("Arial", 8))
        else:
            self.bg_info = ttk.Label(options_frame, text="‚ùå Installer avec 'pip install rembg' pour activer", 
                                    foreground="red", font=("Arial", 8))
            # D√©sactiver la checkbox si rembg n'est pas disponible
            self.bg_checkbox.config(state="disabled")
        
        self.bg_info.grid(row=0, column=1, sticky=tk.W, padx=(10, 0))
        
        # Largeur
        ttk.Label(main_frame, text="Largeur:").grid(row=4, column=0, sticky=tk.W, pady=5)
        
        width_frame = ttk.Frame(main_frame)
        width_frame.grid(row=4, column=1, columnspan=2, sticky=(tk.W, tk.E), pady=5)
        
        # Sous-frame pour le slider et le label
        slider_frame = ttk.Frame(width_frame)
        slider_frame.grid(row=0, column=0, sticky=tk.W)
        
        width_scale = ttk.Scale(slider_frame, from_=20, to=300, 
                               variable=self.width, orient=tk.HORIZONTAL, length=200)
        width_scale.grid(row=0, column=0, padx=(0, 10))
        
        self.width_label = ttk.Label(slider_frame, text="80 caract√®res")
        self.width_label.grid(row=0, column=1)
        
        # Boutons de taille pr√©d√©finie
        preset_frame = ttk.LabelFrame(width_frame, text="Tailles pr√©d√©finies", padding="5")
        preset_frame.grid(row=1, column=0, sticky=(tk.W, tk.E), pady=(10, 0))
        
        # D√©finition des tailles pr√©d√©finies
        preset_sizes = [
            ("Tr√®s petit", 40),
            ("Petit", 60), 
            ("Moyen", 80),
            ("Grand", 120),
            ("Tr√®s grand", 200),
            ("√ânorme", 300)
        ]
        
        # Cr√©er les boutons de taille
        for i, (label, size) in enumerate(preset_sizes):
            btn = ttk.Button(preset_frame, text=f"{label}",
                            command=lambda s=size: self.set_width_preset(s),
                            width=10)
            btn.grid(row=0, column=i, padx=2, pady=2)
            
            # Ajouter une infobulle
            self.create_tooltip(btn, f"D√©finir la largeur √† {size} caract√®res\nRecommand√© pour: {self.get_size_recommendation(size)}")
        
        self.width.trace('w', self.update_width_label)
        
        # Boutons
        button_frame = ttk.Frame(main_frame)
        button_frame.grid(row=5, column=0, columnspan=3, pady=20)
        
        self.generate_btn = ttk.Button(button_frame, text="üöÄ G√©n√©rer ASCII", 
                                        command=self.generate_ascii, style="Accent.TButton")
        self.generate_btn.pack(side=tk.LEFT, padx=(0, 10))
        
        ttk.Button(button_frame, text="‚ùå Quitter", 
                    command=self.root.quit).pack(side=tk.LEFT)
        
        # Zone de r√©sultat
        result_frame = ttk.LabelFrame(main_frame, text="R√©sultat ASCII", padding="5")
        result_frame.grid(row=6, column=0, columnspan=3, sticky=(tk.W, tk.E, tk.N, tk.S), pady=(20, 0))
        result_frame.columnconfigure(0, weight=1)
        result_frame.rowconfigure(0, weight=1)
        main_frame.rowconfigure(6, weight=1)
        
        # Zone de texte avec scrollbars
        text_frame = ttk.Frame(result_frame)
        text_frame.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        text_frame.columnconfigure(0, weight=1)
        text_frame.rowconfigure(0, weight=1)
        
        self.result_text = tk.Text(text_frame, wrap=tk.NONE, font=("Courier", 9),
                                    bg="black", fg="white", insertbackground="white")
        
        # Scrollbars
        v_scrollbar = ttk.Scrollbar(text_frame, orient=tk.VERTICAL, command=self.result_text.yview)
        h_scrollbar = ttk.Scrollbar(text_frame, orient=tk.HORIZONTAL, command=self.result_text.xview)
        
        self.result_text.configure(yscrollcommand=v_scrollbar.set, xscrollcommand=h_scrollbar.set)
        
        # Grille pour le texte et scrollbars
        self.result_text.grid(row=0, column=0, sticky=(tk.W, tk.E, tk.N, tk.S))
        v_scrollbar.grid(row=0, column=1, sticky=(tk.N, tk.S))
        h_scrollbar.grid(row=1, column=0, sticky=(tk.W, tk.E))
        
        # Message d'accueil dans la zone de r√©sultat
        self.show_welcome_message()
        
        # Boutons pour le r√©sultat
        result_buttons = ttk.Frame(result_frame)
        result_buttons.grid(row=1, column=0, pady=(10, 0))
        
        self.save_btn = ttk.Button(result_buttons, text="üíæ Sauvegarder", 
                                    command=self.save_result, state="disabled")
        self.save_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        self.copy_btn = ttk.Button(result_buttons, text="üìã Copier", 
                                    command=self.copy_result, state="disabled")
        self.copy_btn.pack(side=tk.LEFT)

    def on_background_option_change(self):
        """Appel√© quand l'option de suppression d'arri√®re-plan change."""
        if self.remove_background.get() and not REMBG_AVAILABLE:
            messagebox.showwarning(
                "Fonctionnalit√© non disponible",
                "Pour utiliser la suppression d'arri√®re-plan, installez rembg :\n\n"
                "pip install rembg\n\n"
                "Cette biblioth√®que utilise l'IA pour d√©tecter et supprimer "
                "automatiquement l'arri√®re-plan de vos images."
            )
            self.remove_background.set(False)
        elif self.remove_background.get():
            logger.info("Suppression d'arri√®re-plan activ√©e par l'utilisateur")
        else:
            logger.info("Suppression d'arri√®re-plan d√©sactiv√©e par l'utilisateur")

    def browse_image(self):
        """Ouvre le dialogue de s√©lection d'image."""
        filename = filedialog.askopenfilename(
            title="S√©lectionner une image",
            filetypes=[
                ("Images", "*.jpg *.jpeg *.png *.bmp *.gif *.tiff"),
                ("JPEG", "*.jpg *.jpeg"),
                ("PNG", "*.png"),
                ("Tous les fichiers", "*.*")
            ]
        )
        if filename:
            self.image_path.set(filename)
            
    def update_style_description(self, event=None):
        """Met √† jour la description du style s√©lectionn√©."""
        descriptions = {
            'simple': "Rapide, moins de d√©tails",
            'standard': "Bon √©quilibre qualit√©/vitesse",
            'detailed': "Maximum de d√©tails, plus lent",
            'blocks': "Style pixel art"
        }
        desc = descriptions.get(self.style.get(), "")
        self.style_desc.config(text=desc)
        
    def set_width_preset(self, size):
        """D√©finit une taille pr√©d√©finie."""
        self.width.set(size)
        logger.info(f"Taille pr√©d√©finie s√©lectionn√©e: {size} caract√®res")
        
        # Effet visuel temporaire
        current_text = self.width_label.cget("text")
        self.width_label.config(text=f"‚úì {size} caract√®res", foreground="green")
        self.root.after(1000, lambda: self.width_label.config(text=current_text, foreground="black"))
    
    def get_size_recommendation(self, size):
        """Retourne une recommandation d'usage pour chaque taille."""
        recommendations = {
            40: "Aper√ßu rapide, ic√¥nes",
            60: "Petits d√©tails, miniatures", 
            80: "Usage g√©n√©ral, √©quilibr√©",
            120: "Beaux d√©tails, impression",
            200: "Haute qualit√©, affiches",
            300: "Tr√®s haute r√©solution"
        }
        return recommendations.get(size, "Usage personnalis√©")
    
    def create_tooltip(self, widget, text):
        """Cr√©e une infobulle pour un widget avec support du th√®me."""
        def on_enter(event):
            tooltip = tk.Toplevel()
            tooltip.wm_overrideredirect(True)
            tooltip.wm_geometry(f"+{event.x_root+10}+{event.y_root+10}")
            
            bg_color = "#FFFFDD"
            fg_color = "#000000"
            
            label = tk.Label(tooltip, text=text, justify=tk.LEFT,
                            background=bg_color, foreground=fg_color,
                            relief=tk.SOLID, borderwidth=1,
                            font=("Courier", 9))
            label.pack()
            
            widget.tooltip = tooltip
        
        def on_leave(event):
            if hasattr(widget, 'tooltip'):
                widget.tooltip.destroy()
                del widget.tooltip
        
        widget.bind("<Enter>", on_enter)
        widget.bind("<Leave>", on_leave)

    def update_width_label(self, *args):
        """Met √† jour le label de largeur avec indicateur de qualit√©."""
        size = self.width.get()
        
        # Indicateur de qualit√© selon la taille
        if size < 50:
            quality = "‚ö° Rapide"
        elif size < 80:
            quality = "üöÄ Optimal"  
        elif size < 150:
            quality = "‚≠ê D√©taill√©"
        elif size < 250:
            quality = "üíé Haute qualit√©"
        else:
            quality = "üî• Ultra HD"
        
        self.width_label.config(text=f"{size} caract√®res - {quality}")
        
    def generate_ascii(self):
        """Lance la g√©n√©ration ASCII dans un thread s√©par√©."""
        if not self.image_path.get():
            messagebox.showerror("Erreur", "Veuillez s√©lectionner une image")
            return
        
        # R√©activer l'√©dition de la zone de texte
        if hasattr(self, '_enable_editing'):
            self._enable_editing()
            
        # D√©sactiver le bouton pendant la g√©n√©ration
        self.generate_btn.config(state="disabled", text="‚è≥ G√©n√©ration...")
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(1.0, "G√©n√©ration en cours...\n")
        
        # Lancer dans un thread pour √©viter de bloquer l'interface
        thread = threading.Thread(target=self._generate_ascii_thread)
        thread.daemon = True
        thread.start()
        
    def _generate_ascii_thread(self):
        """Thread de g√©n√©ration ASCII."""
        try:
            generator = ASCIIGenerator(self.style.get())
            ascii_art = generator.generate_ascii(
                self.image_path.get(), 
                width=self.width.get(),
                remove_bg=self.remove_background.get()
            )
            
            # Mettre √† jour l'interface dans le thread principal
            self.root.after(0, self._update_result, ascii_art)
            
        except Exception as e:
            error_msg = f"Erreur lors de la g√©n√©ration: {str(e)}"
            logger.error(error_msg)
            self.root.after(0, self._show_error, error_msg)
    
    def _update_result(self, ascii_art):
        """Met √† jour le r√©sultat dans l'interface (thread principal)."""
        self.generate_btn.config(state="normal", text="üöÄ G√©n√©rer ASCII")
        
        if ascii_art:
            self.result_text.delete(1.0, tk.END)
            self.result_text.insert(1.0, ascii_art)
            self.save_btn.config(state="normal")
            self.copy_btn.config(state="normal")
            
            # Statistiques avec style selon le th√®me
            lines = len(ascii_art.split('\n'))
            chars = len(ascii_art)
            style_name = self.style.get()
            width = self.width.get()
            bg_removed = "Oui" if self.remove_background.get() else "Non"
            
            stats = f"\n\nüìä Statistiques:\n"
            stats += f"   ‚Ä¢ Lignes: {lines}\n"
            stats += f"   ‚Ä¢ Caract√®res: {chars:,}\n"
            stats += f"   ‚Ä¢ Style: {style_name}\n"
            stats += f"   ‚Ä¢ Largeur: {width}\n"
            stats += f"   ‚Ä¢ Arri√®re-plan supprim√©: {bg_removed}\n"
            
            self.result_text.insert(tk.END, stats)
        else:
            self._show_error("√âchec de la g√©n√©ration ASCII")
    
    def _show_error(self, error_msg):
        """Affiche une erreur."""
        self.generate_btn.config(state="normal", text="üöÄ G√©n√©rer ASCII")
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(1.0, f"‚ùå {error_msg}")
        messagebox.showerror("Erreur", error_msg)
        
    def save_result(self):
        """Sauvegarde le r√©sultat ASCII."""
        content = self.result_text.get(1.0, tk.END)
        if not content.strip():
            return
            
        filename = filedialog.asksaveasfilename(
            title="Sauvegarder l'art ASCII",
            defaultextension=".txt",
            filetypes=[("Fichiers texte", "*.txt"), ("Tous les fichiers", "*.*")]
        )
        
        if filename:
            try:
                with open(filename, 'w', encoding='utf-8') as f:
                    f.write(content)
                messagebox.showinfo("Succ√®s", f"Art ASCII sauvegard√© dans:\n{filename}")
            except Exception as e:
                messagebox.showerror("Erreur", f"Erreur lors de la sauvegarde:\n{str(e)}")
                
    def copy_result(self):
        """Copie le r√©sultat dans le presse-papiers."""
        content = self.result_text.get(1.0, tk.END)
        if content.strip():
            self.root.clipboard_clear()
            self.root.clipboard_append(content)
            messagebox.showinfo("Succ√®s", "Art ASCII copi√© dans le presse-papiers!")
    
    def show_welcome_message(self):
        """Affiche le message d'accueil dans la zone de r√©sultat."""
        welcome_text = f"""
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                         BIENVENUE !                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

 Ce logiciel convertit vos images en art ASCII cr√©atif et personnalisable.

 COMMENT COMMENCER :
   1.  Cliquez sur "Parcourir..." pour s√©lectionner votre image
   2.  Choisissez un style de rendu dans le menu d√©roulant
   3.  Activez la suppression d'arri√®re-plan si d√©sir√© (recommand√© pour portraits)
   4.  Ajustez la largeur avec le curseur ou les boutons pr√©d√©finis
   5.  Cliquez sur "üöÄ G√©n√©rer ASCII" pour cr√©er votre art

 STYLES DISPONIBLES :
   ‚Ä¢ Simple     ‚Üí Rapide, id√©al pour les tests
   ‚Ä¢ Standard   ‚Üí √âquilibre parfait qualit√©/vitesse
   ‚Ä¢ Detailed   ‚Üí Maximum de d√©tails et de nuances
   ‚Ä¢ Blocks     ‚Üí Style pixel art moderne

 TAILLES RECOMMAND√âES :
   ‚Ä¢ 40-60      ‚Üí Aper√ßus rapides, ic√¥nes
   ‚Ä¢ 80-100     ‚Üí Usage g√©n√©ral, partage
   ‚Ä¢ 120-200    ‚Üí Haute qualit√©, impression
   ‚Ä¢ 200+       ‚Üí Tr√®s haute r√©solution

 FONCTIONNALIT√âS :
   ‚úÖ Sauvegarde au format TXT
   ‚úÖ Copie directe vers le presse-papiers
   ‚úÖ Pr√©visualisation en temps r√©el
   ‚úÖ Statistiques d√©taill√©es
   ‚úÖ Suppression intelligente d'arri√®re-plan

 Formats support√©s : JPEG, PNG, BMP, GIF, TIFF

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
        """
        
        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(1.0, welcome_text.strip())
        
        # D√©sactiver l'√©dition du texte d'accueil
        self.result_text.config(state="disabled")
        
        # R√©activer l'√©dition lors de la prochaine g√©n√©ration
        def enable_editing():
            self.result_text.config(state="normal")
        
        # Stocker la fonction pour pouvoir la r√©utiliser
        self._enable_editing = enable_editing

    def run(self):
        """Lance l'interface graphique."""
        self.root.mainloop()